#!/usr/bin/env python3

import subprocess as sp

# Gather user input
username = input("Username: ")
password = input("Password: ")
environment = input("Environment name: ")
from_date = input("From date: ")
to_date = input("To date: ")

# Process Kibana reports
def process_reports(line):
    placeholders = {
        'username': username,
        'Password': password,
        'tenant': environment,
    }
    for placeholder, value in placeholders.items():
        line = line.replace(placeholder, value)
    line = line.replace('2021-\d*-\d+[A-Z]\d*:\d*:\d*.\d*[A-Z]', from_date, 1)
    line = line.replace('2021-\d*-\d+[A-Z]\d*:\d*:\d*.\d*[A-Z]', to_date, 1)
    return line

# Process kibana3.txt and generate kibanaa.sh
with open("C:\\KibanaReports\\kibana3.txt", "r") as input_file, \
        open("C:\\KibanaReports\\kibanaa.sh", "w") as output_file:
    for line in input_file:
        processed_line = process_reports(line)
        output_file.write(processed_line)

# Execute kibanaa.sh
sp.call(['sh', 'C:\\KibanaReports\\kibanaa.sh'])

# Optional: Generate and execute additional custom script
custom_script_content = """
# Insert your custom script content here
"""

with open("C:/KibanaReports/myfile.sh", "w") as custom_script_file:
    custom_script_file.write(custom_script_content)

sp.call(['sh', 'C:/KibanaReports/myfile.sh'])

# Clean up
import os
os.remove("C:\\KibanaReports\\kibanaa.sh")
os.remove("C:\\KibanaReports\\myfile.sh")


--Read_me--
Step 1: Gather User Input

The script begins by asking the user for their username, password, environment name, and the date range for the Kibana reports.
Step 2: Process Reports Function

A function called process_reports is defined. This function takes a line of text as input and performs replacements for placeholders like username, Password, tenant, and date formats with the user's inputs.
The date format replacements are assumed to be in a specific format (e.g., '2021-\d*-\d+[A-Z]\d*:\d*:\d*.\d*[A-Z]').
Step 3: Process and Generate Script

The script opens "kibana3.txt" for reading and "kibanaa.sh" for writing.
It reads each line from "kibana3.txt", processes it using the process_reports function, and writes the processed line to "kibanaa.sh".
Step 4: Execute Kibana Script

The subprocess module is used to execute the shell command sh C:\\KibanaReports\\kibanaa.sh, which is intended to run the generated "kibanaa.sh" script.
Step 5: Optional Custom Script

The script creates content for an optional custom script (custom_script_content), but the exact content is not provided in the snippet.
The content is written to "C:/KibanaReports/myfile.sh" for use in later steps.
Step 6: Execute Custom Script

Another subprocess call is made to execute the shell command sh C:/KibanaReports/myfile.sh, which is intended to run the custom script generated in the previous step.
Step 7: Clean Up

The script uses the os.remove function to delete the temporary files "kibanaa.sh" and "myfile.sh" that were created during the process.
Please note that while this explanation provides a high-level overview of the code's steps, certain details and specific content (such as the custom script content) are not fully defined in the original snippet. Also, this code should be customized, thoroughly tested, and validated for your specific environment and use case before deploying it in a production setting.
